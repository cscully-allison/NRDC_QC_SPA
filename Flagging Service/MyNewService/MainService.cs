using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.IO;
using System.Configuration;
using NRDC.Projects.Models.GIDMIS;
using System.Net.Mail;
using System.Net;
using NRDC_QC_Flagging_Service;

namespace FlaggingService
{
    // begin the windows service class
    public partial class NRDC_QC_Flagging_Service : ServiceBase
    {

        // autocreated create variables 
        private Thread _thread;
        private EventLog eventLog1;
        private System.Windows.Forms.Timer timer1;
        private IContainer components;
        private ServiceController serviceController1;
        ManualResetEvent StopRequest = new ManualResetEvent(false);

        public IsRunning run = new IsRunning();

        // service constructor
        public NRDC_QC_Flagging_Service()
        {
            // autogenerated
            InitializeComponent();     
        }

        // begins automatically, called from the constructor
        // service must exit the onStart function within 15 seconds. The service will fail otherwise
        protected override void OnStart(string[] args)
        {
            // log service starting
            // create the log source
            if (!EventLog.SourceExists("MySource"))
            {
                EventLog.CreateEventSource("MySource", "MyNewLog");
            }
            eventLog1.Source = "MySource";
            eventLog1.Log = "MyNewLog";
            eventLog1.WriteEntry("Service Starting...");
            HelperFunctions.WriteToFile("Service Starting");

            // create working thread
            _thread = new Thread(WorkerThreadFunc);
            _thread.Name = "Flagging Service";
            _thread.IsBackground = true;
            _thread.Start();
        }

        string mode = ConfigurationManager.AppSettings["Mode"];

        // thread function
        private void WorkerThreadFunc()
        {


            DateTime scheduledTime = DateTime.MinValue;
            // choose which service to go through

            HelperFunctions.WriteToFile(mode + " Service Starting");
            eventLog1.WriteEntry( mode + " Service Starting");

            // one of these will be deleted once I figure out which one we're doing
            if (mode == "Daily")
                {
                    scheduledTime = DateTime.Parse(ConfigurationManager.AppSettings["ScheduledTime"]);
                }

                // also interval is best for testing purposes
                else if (mode == "Interval")
                {
                    // get the hourly time configuration
                    int intervalMinutes = Convert.ToInt32(ConfigurationManager.AppSettings["IntervalMinutes"]);
                    // get time we're waiting for
                    scheduledTime = DateTime.Now.AddMinutes(intervalMinutes);
                }

            // run until there's an error
            while (run.check())
            {
                if (scheduledTime != DateTime.MinValue)
                {
                    TimingService(ref scheduledTime);
                }
                else
                {
                    run.setFalse();
                    Report("No Mode Set");
                }
            }

            // if error
            if (!run.check())
                {
                    // report it
                    StopRequest.Set();
                    return;
                }
           
        }


        protected override void OnStop()
        {
            //StopRequest.Set();
            if (!_thread.Join(3000))
             {
                 _thread.Abort();
             }
            // log service ending
            eventLog1.WriteEntry("Service Ended");
            HelperFunctions.WriteToFile("Service Ended");
            // send an email
           // Report("Service Ended");
        }


        public void TimingService(ref DateTime scheduledTime)
        {
            try
            {
                // if the time has past
                DateTime current = DateTime.Now;

                if (current > scheduledTime)
                {
                    HelperFunctions.WriteToFile("Log: {0}");

                    // connect to the database
                    ConnectAndFlag();

                    // add a day to the scheduled time
                    if (mode == "Daily")
                    {
                        scheduledTime = scheduledTime.AddDays(1);
                    }
                    // add more time
                    else if (mode == "Interval")
                    {
                        scheduledTime = scheduledTime.AddMinutes(Convert.ToInt32(ConfigurationManager.AppSettings["IntervalMinutes"]));
                    }
                }
         
            }catch (Exception e)
            {
                ErrorHandling.ExceptionHandler(e, run, eventLog1);
            }
        }


        public void ConnectAndFlag() { }

        // actually goes through and check for entries to be flagged
       /* public void ConnectAndFlag2()
        {
            // create list for datastream
            List<DataStreamDetails> DataStreamDetails = new List<DataStreamDetails>();
            try
            {
                   // connect to the SQL server
                using (var db = new GIDMISContainer(ConfigurationManager.ConnectionStrings["GIDMISContainer"].ConnectionString))
                {
                    try
                    {
                        // select all colomun from the datastream database
                        var DataStreamTable = from x in db.Data_Streams
                                              select x;
                        // get info from the datastream
                        foreach (var row in DataStreamTable)
                        {
                            DataStreamDetails.Add(
                            new DataStreamDetails
                            {
                                Deployment = row.Deployment,
                                DataStream = row.Stream
                            });
                        }
                    } catch (Exception e)
                    {
                        ErrorHandling.ExceptionHandler(e, run, eventLog1);
                    }

                    // cycle through datastreams
                    for (int i = 0; i < DataStreamDetails.Count; i++)
                    {
                        try
                        {
                            var Deployment = DataStreamDetails[i].Deployment;
                            // find most recent component associated with the deployment
                            var RelatedComponent = (from x in db.Components
                                                    where x.Deployment == Deployment
                                                    orderby x.Installation_Date descending
                                                    select x).First();

                            // get components specifications
                            var Component = RelatedComponent.Component;
                            var ComponentSpecification = (from x in db.Component_Specifications
                                                          where x.Component == Component
                                                          select x).First();

                            // grab needed info from components
                            DataStreamDetails[i].Component = new Components
                            {
                                ComponentNumber = RelatedComponent.Component,
                                InstallationDate = RelatedComponent.Installation_Date,

                                Maximum = ComponentSpecification.Maximum,
                                Minimum = ComponentSpecification.Minimum,
                                UserSpecified = ComponentSpecification.User_Specified
                            };
                        }
                        catch (Exception e)
                        {
                            ExceptionHandler(e);
                        }

                        //create measuement variables
                        DataStreamDetails[i].Measurements = new List<Measurement>();

                        try
                        {
                            // grab measurements
                            var DataStream = DataStreamDetails[i].DataStream;
                            var MeasurementTable = from x in db.Measurements
                                                   where x.Stream == DataStream
                                                   where x.Measurement_Time_Stamp > DataStreamDetails[i].Measurements
                                                   orderby x.Measurement_Time_Stamp ascending
                                                   select x;

                            // put the values in the list
                            foreach (var row in MeasurementTable)
                            {
                                bool F1 = false;
                                bool F2 = false;
                                String FlagName = null;
                                String FlagDescription = null;

                                // Flag 1
                                // if the flag is above or below the component specifications
                                if (row.Value >= DataStreamDetails[i].Component.Maximum
                                   || row.Value <= DataStreamDetails[i].Component.Minimum)
                                {

                                    if (!DataStreamDetails[i].Component.UserSpecified)
                                    {
                                        F1 = true;
                                    }
                                    else
                                    {
                                        F2 = true;
                                    }

                                    FlagName = "Out of Bounds";
                                    FlagDescription = "The measurment value has gone either abover or below the component's specified bounds."; 

                                }
                                // need to also set name and descritption for flags

                              /*  DataStreamDetails[i].Measurements.Add(
                                    new Measurement
                                    {
                                        Value = row.Value,
                                        Flag1 = new Flags
                                        {
                                            Flag = F1,
                                            Name = FlagName,
                                            Description = FlagDescription
                                        },
                                        Flag2 = new Flags
                                        {
                                            Flag = F2,
                                            Name = null,
                                            Description = null
                                        }

                                    });*/

                                // set Flags in the server
                               /* if (F1)
                                {
                                    row.L1_Quality_Control = new L1_Quality_Control
                                    {
                                        Name = FlagName,
                                        Description = FlagDescription
                                    };
                                }
                                if (F2)
                                {
                                    row.L2_Quality_Control = new L2_Quality_Control
                                    {
                                        Name = FlagName,
                                        Description = FlagDescription
                                    };
                                }

                            }

                            db.SaveChanges();
                        }
                        catch (Exception e)
                        {
                            ExceptionHandler(e);
                        }

                    }
                }
            } catch (Exception e)
            {
                ExceptionHandler(e);
            }
    }*/

        public void Report(String exception)
        {
            SmtpClient client = new SmtpClient()
            {
                Host = "smtp.gmail.com",
                Port = 587,
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                UseDefaultCredentials = false,
                Credentials = new NetworkCredential ("NRDC.Flagging.Service@gmail.com", "Cil!1234")
            };

            //send emails notifying that something is wrong with the service
            MailMessage mail = new MailMessage()
            {
                From = new MailAddress("NRDC.Flagging.Service@gmail.com", "Flagging Service"),
                Subject = "The NRDC Flagging Service has Failed",
                Body = "The NRDC Flagging Service has failed for the following reasons: <br />" + 
                        exception +"<br />" +
                       "Please fix these issues and restart the service. <br />" +
                       "For more information on the failue, check the logs.",
                IsBodyHtml = true
            };

            mail.To.Add(new MailAddress("hannahmunoz@nevada.unr.edu"));

            try
            {
                client.Send(mail);
            }
            catch (Exception e)
            {
                //this doesnt seem right lol
                ErrorHandling.ExceptionHandler(e, run, eventLog1);
            }
        }




        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.eventLog1 = new System.Diagnostics.EventLog();
            this.timer1 = new System.Windows.Forms.Timer(this.components);
            this.serviceController1 = new System.ServiceProcess.ServiceController();
            ((System.ComponentModel.ISupportInitialize)(this.eventLog1)).BeginInit();
            // 
            // eventLog1
            // 
            this.eventLog1.EntryWritten += new System.Diagnostics.EntryWrittenEventHandler(this.eventLog1_EntryWritten);
            ((System.ComponentModel.ISupportInitialize)(this.eventLog1)).EndInit();

        }



        private void eventLog1_EntryWritten(object sender, EntryWrittenEventArgs e)
        {

        }
    }
}
